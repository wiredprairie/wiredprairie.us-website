<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	
	xmlns:georss="http://www.georss.org/georss"
	xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
	>

<channel>
	<title>MVC &#8211; WiredPrairie</title>
	<atom:link href="/blog/index.php/archives/tag/mvc/feed" rel="self" type="application/rss+xml" />
	<link>/blog</link>
	<description>Yet another tech blog.</description>
	<lastBuildDate>Sat, 02 Mar 2013 16:50:53 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.0</generator>
<site xmlns="com-wordpress:feed-additions:1">193486638</site>	<item>
		<title>Windows 8 IIS Express with Windows Authentication Prompts for Credentials</title>
		<link>/blog/index.php/archives/1850</link>
					<comments>/blog/index.php/archives/1850#comments</comments>
		
		<dc:creator><![CDATA[Aaron]]></dc:creator>
		<pubDate>Sat, 02 Mar 2013 16:50:52 +0000</pubDate>
				<category><![CDATA[General]]></category>
		<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[MVC]]></category>
		<category><![CDATA[Visual Studio]]></category>
		<category><![CDATA[Windows 8]]></category>
		<guid isPermaLink="false">/blog/?p=1850</guid>

					<description><![CDATA[If you’re seeing a credentials prompt every time you launch a local IIS or IIS Express web application that requires Windows Authentication, you’ll likely grow as tired of typing in your password as I was. To add to the annoyance, the Remember my credentials checkbox doesn’t work (nothing is saved). The setup: Windows 8 Visual [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>If you’re seeing a credentials prompt every time you launch a local IIS or IIS Express web application that requires Windows Authentication, you’ll likely grow as tired of typing in your password as I was. To add to the annoyance, the <strong>Remember my credentials</strong> checkbox doesn’t work (nothing is saved).</p>
<p><a href="/blog/wp-content/uploads/2013/03/image.png"><img loading="lazy" title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; border-left: 0px; display: block; padding-right: 0px" border="0" alt="image" src="/blog/wp-content/uploads/2013/03/image_thumb.png" width="443" height="351" /></a></p>
<p>The setup:</p>
<ul>
<li>Windows 8</li>
<li>Visual Studio 2012, .NET 4.5, </li>
<li>ASP.NET MVC web application</li>
<li>Non domain-joined computer (it’s on my home network)</li>
<li>Using a Microsoft account (FKA Live ID) as the local account</li>
<li>Using IIS Express/IIS</li>
<li>Windows Authentication <strong>Enabled</strong></li>
<li>Anonymous Logon <strong>Disabled</strong></li>
</ul>
<pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">system.webServer</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">security</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">authentication</span><span class="kwrd">&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">windowsAuthentication</span> <span class="attr">enabled</span><span class="kwrd">=&quot;true&quot;</span> <span class="kwrd">/&gt;</span>
            <span class="kwrd">&lt;</span><span class="html">anonymousAuthentication</span> <span class="attr">enabled</span><span class="kwrd">=&quot;false&quot;</span> <span class="kwrd">/&gt;</span>
        <span class="kwrd">&lt;/</span><span class="html">authentication</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">security</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">system.webServer</span><span class="kwrd">&gt;</span></pre>
<style type="text/css">
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>
<p>While there are a few proposed solutions, this is the only one that worked for me so far.</p>
<ol>
<li>Start Internet Explorer</li>
<li>Click the settings Menu</li>
<li>Select <strong>Internet options</strong></li>
<li>Click the <strong>Security </strong>tab</li>
<li>Select <strong>Local intranet</strong></li>
<li>Click <strong>Sites</strong></li>
<li>Click <strong>Advanced</strong></li>
<li>Add <a href="http://localhost/">http://localhost/</a> to the Local intranet zone</li>
<li>Close.</li>
<li>Verify it’s now working.</li>
</ol>
<p><a href="/blog/wp-content/uploads/2013/03/image1.png"><img loading="lazy" title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; border-left: 0px; display: block; padding-right: 0px" border="0" alt="image" src="/blog/wp-content/uploads/2013/03/image_thumb1.png" width="256" height="290" /></a></p>
<p><a href="/blog/wp-content/uploads/2013/03/image2.png"><img loading="lazy" title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; border-left: 0px; display: block; padding-right: 0px" border="0" alt="image" src="/blog/wp-content/uploads/2013/03/image_thumb2.png" width="425" height="544" /></a></p>
<p><a href="/blog/wp-content/uploads/2013/03/image3.png"><img loading="lazy" title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; border-left: 0px; display: block; padding-right: 0px" border="0" alt="image" src="/blog/wp-content/uploads/2013/03/image_thumb3.png" width="416" height="236" /></a></p>
<p><a href="/blog/wp-content/uploads/2013/03/image4.png"><img loading="lazy" title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; border-left: 0px; display: block; padding-right: 0px" border="0" alt="image" src="/blog/wp-content/uploads/2013/03/image_thumb4.png" width="396" height="351" /></a></p>
<p><a href="/blog/wp-content/uploads/2013/03/image5.png"><img loading="lazy" title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; float: none; padding-top: 0px; padding-left: 0px; margin: 0px auto; border-left: 0px; display: block; padding-right: 0px" border="0" alt="image" src="/blog/wp-content/uploads/2013/03/image_thumb5.png" width="396" height="351" /></a></p>
<p>Done.</p>
<p>Alternatives welcomed. :)</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/index.php/archives/1850/feed</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">1850</post-id>	</item>
		<item>
		<title>Knockout binding for JavaScript route fixup</title>
		<link>/blog/index.php/archives/1820</link>
					<comments>/blog/index.php/archives/1820#comments</comments>
		
		<dc:creator><![CDATA[Aaron]]></dc:creator>
		<pubDate>Sat, 26 Jan 2013 02:48:30 +0000</pubDate>
				<category><![CDATA[Coding]]></category>
		<category><![CDATA[ASP.NET]]></category>
		<category><![CDATA[JavaScript]]></category>
		<category><![CDATA[Knockout]]></category>
		<category><![CDATA[MVC]]></category>
		<guid isPermaLink="false">/blog/?p=1820</guid>

					<description><![CDATA[Part one. After the first round, I felt compelled to KnockOut the code a bit more. I’d mentioned I wasn’t pleased with the code exactly. It needed some refactoring. So, I’ve created a new Knockout binding handler. This binding handler replaces&#160; named parameters with a model’s properties in a path. For example, given this object: [&#8230;]]]></description>
										<content:encoded><![CDATA[<p><a href="/blog/index.php/archives/1800">Part one.</a></p>
<p>After the first round, I felt compelled to KnockOut the code a bit more. I’d mentioned I wasn’t pleased with the code exactly. It needed some refactoring.</p>
<p>So, I’ve created a new Knockout binding handler. This binding handler replaces&#160; named parameters with a model’s properties in a path. </p>
<p>For example, given this object:</p>
<table cellspacing="0" cellpadding="2" width="400" border="1">
<tbody>
<tr>
<td valign="top" width="200"><strong>Property Name</strong></td>
<td valign="top" width="200"><strong>Value</strong></td>
</tr>
<tr>
<td valign="top" width="200">id</td>
<td valign="top" width="200">A123</td>
</tr>
<tr>
<td valign="top" width="200">first_name</td>
<td valign="top" width="200">Aaron</td>
</tr>
<tr>
<td valign="top" width="200">state</td>
<td valign="top" width="200">WI</td>
</tr>
</tbody>
</table>
<p>The following paths would be converted thusly:</p>
<table cellspacing="0" cellpadding="2" width="400" border="1">
<tbody>
<tr>
<td valign="top" width="200"><strong>Original</strong></td>
<td valign="top" width="200"><strong>Replaced</strong></td>
</tr>
<tr>
<td valign="top" width="200">/person/{id}</td>
<td valign="top" width="200">/person/A123</td>
</tr>
<tr>
<td valign="top" width="200">/person/{state}/{id}</td>
<td valign="top" width="200">/person/WI/A123</td>
</tr>
</tbody>
</table>
<p>You get the idea. Here’s the JavaScript code:</p>
<pre class="csharpcode">ko.bindingHandlers[<span class="str">'route'</span>] = {
    <span class="rem">// Examples: </span>
    <span class="rem">//      &lt;a data-bind=&quot;route: {model: $data, url: 'person_details', attr: 'href' }&quot; &gt;</span>
    <span class="rem">// or, you can shortcut the syntax to default to the currently bound object and just pass </span>
    <span class="rem">// the url or the route name as a string directly</span>
    <span class="rem">//      &lt;a data-bind=&quot;route: 'person_details' }&quot; &gt;</span>
    update: <span class="kwrd">function</span> (element, valueAccessor, allBindingsAccessor, $data) {
        <span class="kwrd">var</span> valueUnwrapped = ko.utils.unwrapObservable(valueAccessor());
        <span class="kwrd">var</span> options = ko.bindingHandlers.route.options || {};

        <span class="rem">// look for the model property </span>
        <span class="kwrd">var</span> model = ko.utils.unwrapObservable(valueUnwrapped[<span class="str">'model'</span>]);
        <span class="kwrd">if</span> (<span class="kwrd">typeof</span> model !== <span class="str">'object'</span>) {

            model = ko.utils.unwrapObservable($data);
            <span class="kwrd">if</span> (<span class="kwrd">typeof</span> model === <span class="str">'undefined'</span> || model === <span class="kwrd">null</span>) {
                <span class="kwrd">throw</span> <span class="kwrd">new</span> Error(<span class="str">'set route model to object (or nothing bound?)'</span>);
            }
        }

        <span class="rem">// look for the url property first</span>
        <span class="kwrd">var</span> url = ko.utils.unwrapObservable(valueUnwrapped[<span class="str">'url'</span>]);
        <span class="rem">// validate we've got something as a url (might be a name, might be a full url)        </span>
        <span class="kwrd">if</span> (<span class="kwrd">typeof</span> url !== <span class="str">'string'</span> || url == <span class="str">&quot;&quot;</span>) {
            url = valueUnwrapped;
            <span class="kwrd">if</span> (<span class="kwrd">typeof</span> url !== <span class="str">'string'</span> || url == <span class="str">&quot;&quot;</span>) {
                <span class="kwrd">throw</span> <span class="kwrd">new</span> Error(<span class="str">&quot;set route url property to route name or url directly&quot;</span>);
            }
        }

        <span class="rem">// is it on the keyed collection?</span>
        <span class="kwrd">var</span> map = options.map;
        <span class="kwrd">if</span> (<span class="kwrd">typeof</span> map !== <span class="str">'undefined'</span> &amp;&amp; map !== <span class="kwrd">null</span>) {
            <span class="kwrd">if</span> (map.hasOwnProperty(url)) {
                url = map[url];
            }
        }
        <span class="rem">// check for a routing function as well</span>
        <span class="kwrd">var</span> fn = options.routeNameToUrl;
        <span class="kwrd">if</span> (<span class="kwrd">typeof</span> fn === <span class="str">'function'</span>) { url = fn.call(<span class="kwrd">null</span>, url); }
        <span class="rem">// did we get something meaningful?</span>
        <span class="kwrd">if</span> (url !== <span class="kwrd">null</span> &amp;&amp; url !== <span class="str">''</span> &amp;&amp; url.length &gt; 0) {
            url = ko.bindingHandlers.route.buildUrl(url, model);            
        }
        <span class="rem">// the url might need some fixin after a routing, anything goes here (might just be a default)</span>
        fn = options.fixUrl;
        <span class="kwrd">if</span> (<span class="kwrd">typeof</span> fn === <span class="str">'function'</span>) { url = fn.call(<span class="kwrd">null</span>, url); }
        element.setAttribute(ko.utils.unwrapObservable(valueUnwrapped[<span class="str">'attr'</span>]) || <span class="str">'href'</span>, url);
    },    

    <span class="rem">// given a model, this function replaces named parameters in a simple string </span>
    <span class="rem">// with values from the model</span>
    <span class="rem">//     /path/to/some/{id}/{category}</span>
    <span class="rem">// with object { 'id' : 'abc', 'category' : 'cars' }</span>
    <span class="rem">// becomes</span>
    <span class="rem">//     /path/to/some/abc/cars</span>
    buildUrl : <span class="kwrd">function</span>(url, model) {
        <span class="rem">// unfixed if there's not a thing</span>
        <span class="kwrd">if</span> (<span class="kwrd">typeof</span> model === <span class="str">'undefined'</span> || model === <span class="kwrd">null</span>) { <span class="kwrd">return</span> url; }

        <span class="kwrd">var</span> propValue;
        <span class="kwrd">for</span> (<span class="kwrd">var</span> propName <span class="kwrd">in</span> model) {                
            <span class="kwrd">if</span> (model.hasOwnProperty(propName)) {
                propValue = model[propName];
                <span class="kwrd">if</span> (ko) { propValue = ko.utils.unwrapObservable(propValue); }

                <span class="kwrd">if</span> (<span class="kwrd">typeof</span> propValue === <span class="str">'undefined'</span> || propValue === <span class="kwrd">null</span>) {
                    propValue = <span class="str">&quot;&quot;</span>;
                } <span class="kwrd">else</span> {
                    propValue = propValue.toString();
                }
                url = url.replace(<span class="str">'{'</span> + propName.toLowerCase() + <span class="str">'}'</span>, propValue);
            }
        }
        <span class="kwrd">return</span> url;
    },

    options: {
        <span class="rem">// ** convert a route name to a url through whatever means you'd like</span>
        <span class="rem">// routeNameToUrl : function(routeName) { return url; } </span>

        <span class="rem">// ** anything you want, called after routeNameToUrl, might add a virtual directory</span>
        <span class="rem">// ** for example</span>
        <span class="rem">// fixUrl: function(url) { return url;  }  </span>

        <span class="rem">// ** A map route names to URLs **</span>
        <span class="rem">// all other functions are called if set (to possibly override this)</span>
        <span class="rem">// this is not required if you use one of the other functions</span>
        <span class="rem">// map : { 'a_route_name' : '/path/to/something/{id}/{action}' }        </span>
    }
};</pre>
<style type="text/css">
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>
<style type="text/css">
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>
<p>In another JavaScript file, I did initialize some of the options:</p>
<pre class="csharpcode">ko.bindingHandlers.route.options.routeNameToUrl = getRoute;
ko.bindingHandlers.route.options.fixUrl = app_url;</pre>
<style type="text/css">
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>
<p>The <strong>getRoute</strong> function just maps a route name to a path, and the <strong>app_url</strong> prepends the virtual directory to the path as needed.</p>
<p>Here it is in use:</p>
<pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">div</span> <span class="attr">data-bind</span><span class="kwrd">=&quot;foreach: data.persons&quot;</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">h3</span> <span class="attr">class</span><span class="kwrd">=&quot;title&quot;</span> <span class="attr">data-bind</span><span class="kwrd">=&quot;text: Title&quot;</span><span class="kwrd">&gt;&lt;/</span><span class="html">h3</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;</span><span class="html">div</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">a</span> <span class="attr">data-bind</span><span class="kwrd">=&quot;route: { model: $data, url: 'person_details', attr: 'href' } &quot;</span><span class="kwrd">&gt;</span>Details2<span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">a</span> <span class="attr">data-bind</span><span class="kwrd">=&quot;route: '/data/details/{id}/{title}' &quot;</span><span class="kwrd">&gt;</span>Details<span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;</span>
        <span class="kwrd">&lt;</span><span class="html">a</span> <span class="attr">data-bind</span><span class="kwrd">=&quot;route: 'person_details' &quot;</span><span class="kwrd">&gt;</span>Details<span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;</span>
    <span class="kwrd">&lt;/</span><span class="html">div</span><span class="kwrd">&gt;</span>
<span class="kwrd">&lt;/</span><span class="html">div&gt;</span></pre>
<style type="text/css">
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>
<style type="text/css">
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }</style>
<p>You’ll probably like the new way better syntactically at least compared to the <a href="/blog/index.php/archives/1800">old</a> way. A route binding requires one input when used in it’s most basic form:</p>
<ul>
<li><strong>url = </strong>the URL or route name to use as the template for the replacement. It should contain (or later resolve to) curly-braced enclosed property name keys which will be substituted by values from the model. The value of the property could be either a route name (see options below) or a path.</li>
</ul>
<p>When using just the basic form you can use the shortened syntax:</p>
<pre class="csharpcode"><span class="kwrd">&lt;</span><span class="html">a</span> <span class="attr">data-bind</span><span class="kwrd">=&quot;route: 'research_details' &quot;</span><span class="kwrd">&gt;</span>Details<span class="kwrd">&lt;/</span><span class="html">a</span><span class="kwrd">&gt;</span></pre>
<p>This handily binds to the current object (via the bindingContext.$data property of the bindingHandler update function call, which is <strong>also </strong>the fourth parameter, which I’ve renamed to $data rather than the typical viewModel). So, you won’t need to necessarily (explicitly) set the model for the binding.</p>
<p>If you need a a bit more control, you can change the syntax and get access to a few other options (including direct access to the model you want to bind to if the current item isn’t directly what you want to use).</p>
<ul>
<li><strong>model</strong> = this is the object that contains the properties and values to be used as replacements within the url </li>
<li><strong>attr </strong>(optional) = the name of the attribute to set the generated url into. Defaults to href if not set.</li>
</ul>
<p>There are a few global options you can control as well:</p>
<ul>
<li><strong>routeNameToUrl </strong>= (function)(routeName) optionally, given a route name, should return the path (or the original value). Here you can do a lookup of routeName to path. </li>
<li><strong>map</strong> = {object} the object properties should be route names and set equal to the path. this optional lookup is performed before the routeNameToUrl function is called. </li>
<li><strong>fixUrl</strong> = (function)(url) do anything here. this is called after the mapping and routeNameToUrl is optionally called. I use this to correct javascript Ajax request paths by appending the application virtual directory</li>
</ul>
<p>(Thanks to <a href="http://www.knockmeout.net/">Ryan</a> for the suggestion to use the $data on the bindingContext, and then again for the nudge to just use the 4th parameter. <img class="wlEmoticon wlEmoticon-smile" style="border-top-style: none; border-left-style: none; border-bottom-style: none; border-right-style: none" alt="Smile" src="/blog/wp-content/uploads/2013/01/wlEmoticon-smile.png" /> )</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/index.php/archives/1820/feed</wfw:commentRss>
			<slash:comments>5</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">1820</post-id>	</item>
		<item>
		<title>Return of syntax highlighting and code completion for KnockoutJS in VS2010 (when using Razor)</title>
		<link>/blog/index.php/archives/1204</link>
					<comments>/blog/index.php/archives/1204#comments</comments>
		
		<dc:creator><![CDATA[Aaron]]></dc:creator>
		<pubDate>Fri, 01 Apr 2011 01:35:03 +0000</pubDate>
				<category><![CDATA[Coding]]></category>
		<category><![CDATA[MVC]]></category>
		<category><![CDATA[Razor]]></category>
		<guid isPermaLink="false">/blog/index.php/archives/1204</guid>

					<description><![CDATA[OK, admittedly, this is a workaround for an issue where the syntax of jQuery Templates (used by KnockoutJS) doesn’t lend itself to the most pleasant editing experience in Visual Studio, but eh. This was inspired after talking with Ryan a bit and seeing a recent post on his new web site. Here’s what I came [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>OK, admittedly, this is a workaround for an issue where the syntax of <a href="http://api.jquery.com/jquery.tmpl/">jQuery Templates</a> (used by <a href="http://knockoutjs.com/">KnockoutJS</a>) doesn’t lend itself to the most pleasant editing experience in Visual Studio, but eh.</p>
<p>This was inspired after talking with Ryan a bit and seeing a recent <a href="http://www.knockmeout.net/2011/03/using-external-jquery-template-files.html">post</a> on his new web site. Here’s what I came up with.</p>
<p>Following a similar pattern to the <a href="http://msdn.microsoft.com/en-us/library/dd410596.aspx">BeginForm</a> Helper, I created a “Template” helper. It’s simple to use as the code below demonstrates (the example is taken from the KnockoutJS web site).</p>
<pre class="code"><span style="color: blue">&lt;</span><span style="color: maroon">div </span><span style="color: red">data-bind</span><span style="color: blue">='template: &quot;personTemplate&quot;'&gt; &lt;/</span><span style="color: maroon">div</span><span style="color: blue">&gt;

</span><span style="background: yellow">@</span><span style="color: blue">using </span>(Html.Template(<span style="color: #a31515">&quot;personTemplate&quot;</span>))
{ <span style="background: yellow">&lt;text&gt;</span>    
    ${ name } is ${ age } years old
    <span style="color: blue">&lt;</span><span style="color: maroon">button </span><span style="color: red">data-bind</span><span style="color: blue">='click: makeOlder'&gt;</span>Make older<span style="color: blue">&lt;/</span><span style="color: maroon">button</span><span style="color: blue">&gt;
</span><span style="background: yellow">&lt;/text&gt;</span> }
     
<span style="color: blue">&lt;</span><span style="color: maroon">script </span><span style="color: red">type</span><span style="color: blue">='text/javascript'&gt;
    var </span>viewModel = {
        name: ko.observable(<span style="color: maroon">'Bert'</span>),
        age: ko.observable(78),
        makeOlder: <span style="color: blue">function </span>() {
            <span style="color: blue">this</span>.age(<span style="color: blue">this</span>.age() + 1);
        }
    };
    ko.applyBindings(viewModel);
<span style="color: blue">&lt;/</span><span style="color: maroon">script</span><span style="color: blue">&gt;

</span></pre>
<p>Sometimes, the Razor compiler/engine is confused by the template syntax however, so to work around that, you’ll need to add the &lt;text&gt;…&lt;/text&gt; block to prevent the template syntax from being parsed as Razor syntax. The example above shouldn’t require it. The one that causes problems I’ve found mostly right now is the conditional {{ if }} block which apparently looks like Razor/C# code, and fails. The &lt;text&gt; tag syntax isn’t tragic. The most annoying part is that it highlights as bright yellow.</p>
<p>The Template Helper emits the start and end &lt;script&gt; tags appropriately. There’s an optional second parameter that allows the developer to override the default of the type being text/html.</p>
<pre class="code"><span style="color: blue">using </span>System;
<span style="color: blue">using </span>System.Collections.Generic;
<span style="color: blue">using </span>System.Linq;
<span style="color: blue">using </span>System.Web;
<span style="color: blue">using </span>System.Web.Mvc;

<span style="color: blue">namespace </span>TestMVC.Web
{
    <span style="color: blue">public static class </span><span style="color: #2b91af">MvcExtensions
    </span>{
        <span style="color: gray">/// &lt;summary&gt;
        /// </span><span style="color: green">Automatically generates a script block, useful for non-typical script
        </span><span style="color: gray">/// </span><span style="color: green">tags that have HTML content inside (like those in jquery templates for example)
        </span><span style="color: gray">/// </span><span style="color: green">Always use this within using statement as Dispose must be called to properly close
        </span><span style="color: gray">/// </span><span style="color: green">the script tag.
        </span><span style="color: gray">/// &lt;/summary&gt;
        /// &lt;param name=&quot;helper&quot;&gt;</span><span style="color: green">Html Helper object</span><span style="color: gray">&lt;/param&gt;
        /// &lt;param name=&quot;id&quot;&gt;</span><span style="color: green">The ID for the generated script tag.</span><span style="color: gray">&lt;/param&gt;
        /// &lt;returns&gt;</span><span style="color: green">TemplateBlock object which must be disposed to properly emit
        </span><span style="color: gray">/// </span><span style="color: green">the necessary script tags.</span><span style="color: gray">&lt;/returns&gt;
        </span><span style="color: blue">public static </span><span style="color: #2b91af">TemplateBlock </span>Template(<span style="color: blue">this </span><span style="color: #2b91af">HtmlHelper </span>helper, <span style="color: blue">string </span>id)
        {
            <span style="color: blue">return </span>Template(helper, id, <span style="color: #a31515">&quot;&quot;</span>);
        }

        <span style="color: gray">/// &lt;summary&gt;
        /// </span><span style="color: green">Automatically generates a script block, useful for non-typical script
        </span><span style="color: gray">/// </span><span style="color: green">tags that have HTML content inside (like those in jquery templates for example)
        </span><span style="color: gray">/// </span><span style="color: green">Always use this within using statement as Dispose must be called to properly close
        </span><span style="color: gray">/// </span><span style="color: green">the script tag.
        </span><span style="color: gray">/// &lt;/summary&gt;
        /// &lt;param name=&quot;helper&quot;&gt;</span><span style="color: green">Html Helper object</span><span style="color: gray">&lt;/param&gt;
        /// &lt;param name=&quot;id&quot;&gt;</span><span style="color: green">The ID for the generated script tag.</span><span style="color: gray">&lt;/param&gt;
        /// &lt;param name=&quot;type&quot;&gt;</span><span style="color: green">Defaults to text/html, but may be overriden by setting
        </span><span style="color: gray">/// </span><span style="color: green">this parameter.</span><span style="color: gray">&lt;/param&gt;
        /// &lt;returns&gt;</span><span style="color: green">TemplateBlock object which must be disposed to properly emit
        </span><span style="color: gray">/// </span><span style="color: green">the necessary script tags.</span><span style="color: gray">&lt;/returns&gt;
        </span><span style="color: blue">public static </span><span style="color: #2b91af">TemplateBlock </span>Template(<span style="color: blue">this </span><span style="color: #2b91af">HtmlHelper </span>helper, <span style="color: blue">string </span>id, <span style="color: blue">string </span>type)
        {
            <span style="color: blue">return new </span><span style="color: #2b91af">TemplateBlock</span>(helper.ViewContext, id, type);
        }
    
    }

    <span style="color: blue">public class </span><span style="color: #2b91af">TemplateBlock </span>: <span style="color: #2b91af">IDisposable
    </span>{
        <span style="color: blue">private bool </span>_disposed = <span style="color: blue">false</span>;
        <span style="color: blue">public </span><span style="color: #2b91af">ViewContext </span>ViewContext { <span style="color: blue">get</span>; <span style="color: blue">private set</span>; }
        
        <span style="color: blue">public </span>TemplateBlock(<span style="color: #2b91af">ViewContext </span>context, <span style="color: blue">string </span>id, <span style="color: blue">string </span>type)
        {
            <span style="color: blue">this</span>.ViewContext = context;
            type = <span style="color: blue">string</span>.IsNullOrWhiteSpace(type) ? <span style="color: #a31515">&quot;text/html&quot; </span>: type;
            context.Writer.Write(<span style="color: #a31515">&quot;&lt;script type='{0}' id='{1}'&gt;\n&quot;</span>, type, id);
        }

        <span style="color: blue">private void </span>Disposing(<span style="color: blue">bool </span>disposing)
        {
            <span style="color: blue">if </span>(!_disposed)
            {
                _disposed = <span style="color: blue">true</span>;
                ViewContext.Writer.Write(<span style="color: #a31515">&quot;&lt;/script&gt;\n&quot;</span>);
            }
        }
        <span style="color: blue">public void </span>Dispose()
        {
            <span style="color: blue">this</span>.Disposing(<span style="color: blue">true</span>);            
        }
    }

}</pre>
<p>Enjoy.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/index.php/archives/1204/feed</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">1204</post-id>	</item>
		<item>
		<title>Derserializing ASP.NET MVC JSON formatted Date strings</title>
		<link>/blog/index.php/archives/1183</link>
		
		<dc:creator><![CDATA[Aaron]]></dc:creator>
		<pubDate>Sun, 06 Feb 2011 22:44:47 +0000</pubDate>
				<category><![CDATA[Coding]]></category>
		<category><![CDATA[JavaScript]]></category>
		<category><![CDATA[JSON]]></category>
		<category><![CDATA[MVC]]></category>
		<guid isPermaLink="false">/blog/index.php/archives/1183</guid>

					<description><![CDATA[Have you called an Ajax based action in MVC, only to find that the Date format is being serialized into something that isn’t entirely useful on the client? {&#8220;result&#8221;:[{&#8220;Author&#8221;:&#8221;Aaron&#8221;,&#8221;SentAt&#8221;:&#8221;\/Date(1296824894700)\/&#8221;,&#8221;Text&#8221;:&#8221;Blah Blah&#8221;,&#8221;Id&#8221;:1}],&#8221;runAt&#8221;:&#8221;\/Date(1297031297600)\/&#8221;} You’ll see that the Date is: \/Date(1296824894700)\/ Alas, that’s not very friendly. For a quick translation, I added the following to jQuery’s dataFilter property so [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Have you called an Ajax based action in MVC, only to find that the Date format is being serialized into something that isn’t entirely useful on the client?</p>
<p><strong>{&#8220;result&#8221;:[{&#8220;Author&#8221;:&#8221;Aaron&#8221;,&#8221;SentAt&#8221;:&#8221;\/Date(1296824894700)\/&#8221;,&#8221;Text&#8221;:&#8221;Blah Blah&#8221;,&#8221;Id&#8221;:1}],&#8221;runAt&#8221;:&#8221;\/Date(1297031297600)\/&#8221;}</strong></p>
<p>You’ll see that the Date is:</p>
<p><strong>\/Date(1296824894700)\/</strong></p>
<p>Alas, that’s not very friendly. For a quick translation, I added the following to jQuery’s <a href="http://api.jquery.com/jQuery.ajax/"><strong>dataFilter</strong></a> property so that the date would be formatted in a more human readable format. The <strong>dataFilter</strong> function is used to sanitize a response from a web server.&#160; Here’s what I added:</p>
<pre class="code">$(<span style="color: blue">function </span>() {
    $.ajaxSettings.dataFilter = <span style="color: blue">function </span>(data, type) {
        <span style="color: blue">if </span>(type === <span style="color: maroon">'json'</span>) {
            <span style="color: #006400">// convert things that look like Dates into a UTC Date string
            // and completely replace them. 
            </span>data = data.replace(/(.*?")(\\\/Date\([0-9\-]+\)\\\/)(")/g,
                <span style="color: blue">function </span>(fullMatch, $1, $2, $3) {
                    <span style="color: blue">try </span>{
                        <span style="color: blue">return </span>$1 + <span style="color: blue">new </span>Date(parseInt($2.substr(7))).toUTCString() + $3;
                    }
                    <span style="color: blue">catch </span>(e) {}
                    <span style="color: #006400">// something miserable happened, just return the original string            
                    </span><span style="color: blue">return </span>$1 + $2 + $3;
                });
        }
        <span style="color: blue">return </span>data;
    };
});</pre>
<p>The trick for converting the /\Date(#)\/ syntax easily was from <a href="http://stackoverflow.com/questions/206384/how-to-format-json-date">StackOverflow</a>. It even handles time zone info.</p>
<p>I added a regular expression to look for the various elements that represent a Date in Microsoft JSON serialization format. The resulting date is reformatted to a human readable string. There are 3 capturing groups that I’ve named $1, $2, and $3 which need to be preserved otherwise the JSON string is mangled beyond recognition. Those are returned concatenated to preserve the original formatting of the string.</p>
<p>The resulting date is translated to something like: </p>
<p><strong>Fri, 4 Feb 2011 13:08:14 UTC</strong></p>
<p>Of course, you could do whatever formatting you’d like.</p>
<p>&#160;</p>
<h3>Bonus</h3>
<p>And, as a bonus, you did notice that if you’re using IE9, that the developer tools now have a network trace? Cool. (I’ll still use fiddler for many things, but this will be very handy on machines that don’t have fiddler installed).</p>
<p><img loading="lazy" style="background-image: none; border-bottom: 0px; border-left: 0px; margin: ; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="SNAGHTML51b4c85a" border="0" alt="SNAGHTML51b4c85a" src="/blog/wp-content/uploads/2011/02/SNAGHTML51b4c85a.png" width="450" height="356" /></p>
]]></content:encoded>
					
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">1183</post-id>	</item>
		<item>
		<title>Translating Controller, Action, and Route Data to a JavaScript Object in ASP.NET MVC 3</title>
		<link>/blog/index.php/archives/1171</link>
		
		<dc:creator><![CDATA[Aaron]]></dc:creator>
		<pubDate>Thu, 03 Feb 2011 03:00:23 +0000</pubDate>
				<category><![CDATA[Coding]]></category>
		<category><![CDATA[MVC]]></category>
		<guid isPermaLink="false">/blog/index.php/archives/1171</guid>

					<description><![CDATA[To enable a more rich JavaScript/Ajax experience on a web page, I had need of more detailed information regarding the route that resulted in the current View being displayed. I checked around a few sites, and nothing popped out as obviously awesome. As I was putting the JavaScript in the Layout/Master page, I had few [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>To enable a more rich JavaScript/Ajax experience on a web page, I had need of more detailed information regarding the route that resulted in the current View being displayed. I checked around a few sites, and nothing popped out as obviously awesome. </p>
<p>As I was putting the JavaScript in the Layout/Master page, I had few direct assumptions about the location of the View/route that was currently being executed.</p>
<p>Here are the two options I created this evening.</p>
<p>Option one is admittedly more limited, but it serves to demonstrate the basic technique:</p>
<pre class="code"><span style="color: blue">&lt;</span><span style="color: maroon">script </span><span style="color: red">type</span><span style="color: blue">=&quot;text/javascript&quot;&gt;
        
    </span>var _servedFromUrl = &quot;<span style="background: yellow">@</span>Url.RouteUrl(<span style="color: blue">this</span>.ViewContext.RouteData.Values)&quot;;
    <span style="background: yellow">@{</span> 
        <span style="color: blue">string </span>action = ViewContext.RouteData.Values[<span style="color: #a31515">&quot;action&quot;</span>].ToString();
        <span style="color: blue">string </span>controller = ViewContext.RouteData.Values[<span style="color: #a31515">&quot;controller&quot;</span>].ToString();
    <span style="background: yellow">}
</span>    var action = &quot;<span style="background: yellow">@</span>action&quot;;
    var controller = &quot;<span style="background: yellow">@</span>controller&quot;;
    
<span style="color: blue">&lt;/</span><span style="color: maroon">script</span><span style="color: blue">&gt;
</span></pre>
<p>Note that the code above is contained within a &lt;script&gt; block, as the final destination goal is to make these values available within JavaScript in the browser.</p>
<p>Above, there are actually 2 different options. The first option, results in a string that could look something like this:</p>
<p><strong>/Discussions/Edit/5522</strong></p>
<p>It could be useful to someone. However, it wasn’t useful to me. The next step was to discretely retrieve the action and controller. As you can see, these result in two JavaScript variables, aptly named, <strong>action</strong> and <strong>controller</strong>. </p>
<pre class="code">var action = &quot;Edit&quot;;
var controller = &quot;Discussions&quot;;</pre>
<p>In this case though, I wanted access to all the values, in a more natural JavaScript format: A JavaScript Object with named (ad-hoc) properties.</p>
<pre class="code"><span style="color: blue">&lt;</span><span style="color: maroon">script </span><span style="color: red">type</span><span style="color: blue">=&quot;text/javascript&quot;&gt;        
    var </span>route = {
        <span style="background: yellow">@{</span>                 
            <span style="color: blue">string </span>comma = <span style="color: #a31515">&quot;&quot;</span>;
            <span style="color: blue">foreach </span>(<span style="color: blue">var </span>name <span style="color: blue">in </span>ViewContext.RouteData.Values.Keys)
            { 
                <span style="color: blue">string </span>val = ViewContext.RouteData.Values[name].ToString();
                <span style="background: yellow">@:</span> <span style="background: yellow">@</span>comma<span style="color: maroon">'</span><span style="background: yellow; color: maroon">@</span>name<span style="color: maroon">'</span>: <span style="color: maroon">'</span><span style="background: yellow; color: maroon">@</span>val<span style="color: maroon">'
                </span>comma = <span style="color: #a31515">&quot;,&quot;</span>;
            }    
        <span style="background: yellow">}</span>                   
        };
<span style="color: blue">&lt;/</span><span style="color: maroon">script</span><span style="color: blue">&gt;</span></pre>
<p>The code above loops through all of the RouteData Keys, and adds each and the corresponding value to a JavaScript object instance named <strong>route</strong>. </p>
<p>The results:</p>
<pre class="code"><span style="color: blue">&lt;</span><span style="color: maroon">script </span><span style="color: red">type</span><span style="color: blue">=&quot;text/javascript&quot;&gt;
    var </span>route = {&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style="color: maroon">'id'</span>: <span style="color: maroon">'5522'
                 </span>, <span style="color: maroon">'action'</span>: <span style="color: maroon">'Edit'
                 </span>, <span style="color: maroon">'controller'</span>: <span style="color: maroon">'Discussion'
    </span>};

<span style="color: blue">&lt;/</span><span style="color: maroon">script</span><span style="color: blue">&gt;
</span></pre>
<p>Simple, with discrete values.</p>
]]></content:encoded>
					
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">1171</post-id>	</item>
	</channel>
</rss>
